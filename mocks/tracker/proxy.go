// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/xxx/projects/spinix/internal/tracker/proxy.go

// Package mocktracker is a generated GoMock package.
package mocktracker

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tracker "github.com/mmadfox/spinix/internal/tracker"
)

// MockProxy is a mock of Proxy interface.
type MockProxy struct {
	ctrl     *gomock.Controller
	recorder *MockProxyMockRecorder
}

// MockProxyMockRecorder is the mock recorder for MockProxy.
type MockProxyMockRecorder struct {
	mock *MockProxy
}

// NewMockProxy creates a new mock instance.
func NewMockProxy(ctrl *gomock.Controller) *MockProxy {
	mock := &MockProxy{ctrl: ctrl}
	mock.recorder = &MockProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxy) EXPECT() *MockProxyMockRecorder {
	return m.recorder
}

// NewClient mocks base method.
func (m *MockProxy) NewClient(ctx context.Context, addr string) (tracker.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClient", ctx, addr)
	ret0, _ := ret[0].(tracker.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClient indicates an expected call of NewClient.
func (mr *MockProxyMockRecorder) NewClient(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockProxy)(nil).NewClient), ctx, addr)
}
